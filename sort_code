class c_sort {
	//protected $kp;//キーの位置
	//protected $rule1;//0なら昇順、1なら降順
	//protected $rule2;//0なら先入れ先置き、1なら先入れ後置き
	public function __construct(protected $kp,protected $rule1=0,protected $rule2=0){
	}
	public function sort($d2_t){
		$cn=count($d2_t);
		if($cn<2){return $d2_t;}
		elseif($cn<10){return $this->i_sort($d2_t);}

		$cn1=ceil($cn/2);
		$cn2=$cn-$cn1;
		list($d2_t1,$d2_t2)=array_chunk($d2_t,$cn1);
		$d2_t1=$this->sort($d2_t1);
		$d2_t2=$this->sort($d2_t2);
		
		$d2_rt=array();
		$step1=0;
		$step2=0;
		for($i1=0;$i1<$cn;$i1++){
			if($step1>=$cn1){
				for(;$step2<$cn2;$step2++){
					$d2_rt[]=$d2_t2[$step2];
				}
				return $d2_rt;
			}elseif($step2>=$cn2){
				for(;$step1<$cn1;$step1++){
					$d2_rt[]=$d2_t1[$step1];
				}
				return $d2_rt;
			}elseif($this->compare($d2_t1[$step1],$d2_t2[$step2])<0){
				$d2_rt[]=$d2_t2[$step2];
				$step2++;
			}else{
				$d2_rt[]=$d2_t1[$step1];
				$step1++;
			}
		}
		return $d2_rt;//不要なはずだけど、一応置いておく。
	}
	protected function compare($node1,$node2){//$node1を先置きするべきなら1、後置きするべきなら-1を返す
		if($this->rule1==0){
			if($node1[$this->kp]==$node2[$this->kp]){
				return (-1)**$this->rule2;
			}
			return $node1[$this->kp]<$node2[$this->kp]? 1:-1;	
		}elseif($this->rule1==1){
			if($node1[$this->kp]==$node2[$this->kp]){
				return (-1)**$this->rule2;
			}
			return $node1[$this->kp]>$node2[$this->kp]? -1:1;
		}
	}
	public function i_sort($d2_t){//挿入ソート
		$cn=count($d2_t);
		if($cn<2){return $d2_t;}

		$d2_rt=array($d2_t[0]);
		for($i1=1;$i1<$cn;$i1++){
			$d2_rt=$this->insert($d2_rt,$d2_t[$i1]);
		}
		return $d2_rt;
	}
	public function insert($d2_b,$d1_t){//挿入ソートの挿入部分
		$cn=count($d2_b);
		if($cn==0){return array($d1_t);}//今回が一つ目の場合
		
		$tu=$cn-1;
		$td=0;

		if($this->compare($d2_b[$cn-1],$d1_t)>0){//最後尾に追加パターン
			$d2_b[]=$d1_t;
			return $d2_b;
		}elseif($this->compare($d2_b[0],$d1_t)<0){//先頭に追加パターン
			array_unshift($d2_b,0);
			$d2_b[0]=$d1_t;
			return $d2_b;
		}else{//二分探索で追加位置を探す
			while(true){
				if($tu-$td==1){
					array_splice($d2_b,$tu,0,0);
					$d2_b[$tu]=$d1_t;
					return $d2_b;
				}else{
					$half=floor(($tu+$td)/2);
					if($this->compare($d2_b[$half],$d1_t)>0){//中間点が挿入分より先置きすべきなら
						$td=$half;
					}else{
						$tu=$half;
					}
				}
			}
		}
	}
}
function c_sort($d2_t,$kp,$rule1=0,$rule2=0){
  $obj=new c_sort($kp,$rule1,$rule2);
  return $obj->sort($d2_t);
}
