namespace crast{
    class knapsack{//ナップサック問題を解く
        protected $d2_b;//コスト、価値の配列
        protected $cn_b;//$d2_bの要素数
        protected $d2_m;//有効最大リスト番号→残りコスト→範囲最大値のメモ配列
        protected $maxCost;//最大コスト条件
        protected $z_max;//暫定最大値
        protected $sumCost;//コスト合計
        protected $sumValue;//価値合計

        public function __construct($d2_b,$maxCost){
            $this->sumCost=0;
            $this->sumValue=0;
            foreach($d2_b as $d1_fe){
                $d1_fe[2]=$d1_fe[1]/$d1_fe[0];
                $this->sumCost+=$d1_fe[0];
                $this->sumValue+=$d1_fe[1];
                $this->insert($d1_fe);
                $this->cn_b++;
            }
            $this->maxCost=$maxCost;
        }
        protected function insert($d1_t){
            if($this->cn_b==0){$this->d2_b=array($d1_t);return;}//今回が一つ目の場合
            $tu=$this->cn_b-1;$td=0;
            if($this->d2_b[$this->cn_b-1][2]<=$d1_t[2]){$this->d2_b[]=$d1_t;}//最後尾に追加パターン
            elseif($this->d2_b[0][2]>$d1_t[2]){array_unshift($this->d2_b,0);$this->d2_b[0]=$d1_t;}//先頭に追加パターン
            else{//二分探索で追加位置を探す
                while(true){
                    if($tu-$td==1){array_splice($this->d2_b,$tu,0,0);$this->d2_b[$tu]=$d1_t;break;}
                    else{
                        $nt=floor(($tu+$td)/2);
                        if($this->d2_b[$nt][2]<=$d1_t[2]){$td=$nt;}
                        else{$tu=$nt;}
                    }//下以上で上より小さい、の範囲で狭めていく
                }
            }
        }   
        public function getReturn(){
            $this->d2_m=array_fill(0,count($this->d2_b),array());
            $this->z_max=0;
            $rc=$this->sumCost;
            $rv=$this->sumValue;
            $lastCost=$this->maxCost;
            for($i1=$this->cn_b-1;$i1>=0;$i1--){//暫定最大値を貪欲法で作成
                if($this->d2_b[$i1][0]>$lastCost){break;}
                $this->z_max+=$this->d2_b[$i1][1];
                $lastCost-=$this->d2_b[$i1][0];
                $rc-=$this->d2_b[$i1][0];
                $rv-=$this->d2_b[$i1][1];
            }
            $lastKey=$i1;
            $vn=$this->z_max;
            for($i1=$lastKey;;$i1++){//暫定最大値を作ったところから、要素を一つずつ増やしながらそれぞれ再帰していく。
                $this->z_max=$vn+$this->do_rp($i1,$lastCost,$vn,$rc,$rv);//最大有効リスト番号、残りコスト、現在価値、有効リスト合計コスト、有効リスト合計価値
                if($i1==$this->cn_b-1){break;}
                $lastCost+=$this->d2_b[$i1+1][0];
                $vn-=$this->d2_b[$i1+1][1];
                $rc+=$this->d2_b[$i1+1][0];
                $rv+=$this->d2_b[$i1+1][1];
            }
            return $this->z_max;//最終的に、更新された暫定最大値を解答とする。
        }
        protected function do_rp($ln,$cn,$vn,$rc,$rv){//最大有効リスト番号、残りコスト、現在価値、有効リスト合計コスト、有効リスト合計価値
            if(array_key_exists($cn,$this->d2_m[$ln])){return $this->d2_m[$ln][$cn];}
            if($cn<=0){$this->d2_m[$ln][$cn]=0;return 0;}
            if(($this->z_max-$vn)/$cn>$this->d2_b[$ln][2]){return 0;}
            if(($this->z_max-$vn)>$rv){return 0;}
            if($cn>=$rc){$this->d2_m[$ln][$cn]=$rv;return $rv;}
            if($ln==0){$this->d2_m[$ln][$cn]=0;return 0;}

            $rc-=$this->d2_b[$ln][0];
            $rv-=$this->d2_b[$ln][1];
            $rtn=$this->do_rp($ln-1,$cn,$vn,$rc,$rv);
            if($this->d2_b[$ln][0]<=$cn){
                $rtn2=$this->do_rp($ln-1,$cn-$this->d2_b[$ln][0],$vn+$this->d2_b[$ln][1],$rc,$rv);
                $rtn=max($rtn,$rtn2+$this->d2_b[$ln][1]);
            }
            $this->d2_m[$ln][$cn]=$rtn;
            if($this->z_max<$vn+$rtn){$this->z_max=$vn+$rtn;}
            return $rtn;
        }
    }
    function knapsack($d2_b,$maxCost){
        $obj=new knapsack($d2_b,$maxCost);
        return $obj->getReturn();
    }
}
