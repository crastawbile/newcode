<?PHP
//新しいコードを試してみる場所。

//ナップサック問題を解く処理。
set_time_limit(0);
function timeCheck(){
	static $beforeCheckTime;
	$newCheckTime=substr(str_pad(hrtime()[0],9,"0",STR_PAD_LEFT).".".str_pad(hrtime()[1],9,"0",STR_PAD_LEFT),4,9);
	if(isset($beforeCheckTime)){$echo=round($newCheckTime-$beforeCheckTime,3);echo "time_$echo<br>\n";}
	$beforeCheckTime=$newCheckTime;
}
//テスト用乱数生成
$ln_t=300;
$ln_c=300;
$ln_v=300;
$maxCost=10000;
$d2_b=array();
for($i1=0;$i1<$ln_t;$i1++){
    $d2_b[]=array(rand(1,$ln_c),rand(1,$ln_v));
}
timecheck();


$d2_m=array_fill(0,$ln_t,array());
$an2=simple_rp($ln_t-1,$maxCost);
echo "$an2\n";
timecheck();

function simple_rp($ln,$cn){
    global $d2_b;
    global $d2_m;

    if(array_key_exists($cn,$d2_m[$ln])){return $d2_m[$ln][$cn];}
    if($cn<=0){return 0;}
    if($ln==0){
        if($d2_b[0][0]<=$cn){return $d2_b[0][1];}
        else{return 0;}
    }
    $rtn=simple_rp($ln-1,$cn);
    if($d2_b[$ln][0]<=$cn){
        $rtn2=$d2_b[$ln][1]+simple_rp($ln-1,$cn-$d2_b[$ln][0]);
        $rtn=max($rtn,$rtn2);
    }
    $d2_m[$ln][$cn]=$rtn;
    return $rtn;
}

class knapsack0{
    protected $d2_b;
    protected $d2_m;
    protected $maxCost;
    protected $rotete1;
    protected $rotete2;
    protected $rotete3;
    
    public function __construct($d2_b,$maxCost){
        $this->d2_b=$d2_b;
        $this->maxCost=$maxCost;
    }
    public function getReturn(){
        $this->d2_m=array_fill(0,count($this->d2_b),array());
        $this->rotate1=0;
        $this->rotate2=0;
        $this->rotate3=0;
        return $this->do_rp(count($this->d2_b)-1,$this->maxCost);
    }
    protected function do_rp($ln,$cn){
        $this->rotate1++;
        if(array_key_exists($cn,$this->d2_m[$ln])){return $this->d2_m[$ln][$cn];}
        $this->rotate2++;
        if($cn<=0){return 0;}
        if($ln==0){
            if($this->d2_b[0][0]<=$cn){return $this->d2_b[0][1];}
            else{return 0;}
        }

        $this->rotate3++;
        $rtn=$this->do_rp($ln-1,$cn);
        if($this->d2_b[$ln][0]<=$cn){
            $rtn2=$this->d2_b[$ln][1]+$this->do_rp($ln-1,$cn-$this->d2_b[$ln][0]);
            $rtn=max($rtn,$rtn2);
        }
        $this->d2_m[$ln][$cn]=$rtn;
        return $rtn;
    }
    public function getRoteteCount(){
        echo "<br>\n".$this->rotate1.",".$this->rotate1-$this->rotate2.",".$this->rotate2-$this->rotate3.",".$this->rotate3."<br>\n";
    }
}
$obj=new knapsack0($d2_b,$maxCost);
$an=$obj->getReturn();
echo "knapsack0 $an\n";
$obj->getRoteteCount();
timecheck();

class knapsack1{//コスト昇順に並べて、残りコストで全部とれるならそこで終わることで探索を早める
    protected $d2_b;
    protected $cn_b;
    protected $d2_m;
    protected $maxCost;
    protected $sumCost;
    protected $rotate1;
    protected $rotate2;
    protected $rotate3;

    public function __construct($d2_b,$maxCost){
        $this->sumCost=0;
        foreach($d2_b as $d1_fe){
            $this->sumCost+=$d1_fe[0];
            $this->insert($d1_fe);
            $this->cn_b++;
        }
        $this->maxCost=$maxCost;
    }
    protected function insert($d1_t){
        if($this->cn_b==0){$this->d2_b=array($d1_t);return;}//今回が一つ目の場合
        $tu=$this->cn_b-1;$td=0;
        if($this->d2_b[$this->cn_b-1][0]<=$d1_t[0]){$this->d2_b[]=$d1_t;}//最後尾に追加パターン
        elseif($this->d2_b[0][0]>$d1_t[0]){array_unshift($this->d2_b,0);$this->d2_b[0]=$d1_t;}//先頭に追加パターン
        else{//二分探索で追加位置を探す
            while(true){
                if($tu-$td==1){array_splice($this->d2_b,$tu,0,0);$this->d2_b[$tu]=$d1_t;break;}
                else{
                    $nt=floor(($tu+$td)/2);
                    if($this->d2_b[$nt][0]<=$d1_t[0]){$td=$nt;}
                    else{$tu=$nt;}
                }//下以上で上より小さい、の範囲で狭めていく
            }
        }
    }   

    public function getReturn(){
        $this->d2_m=array_fill(0,count($this->d2_b),array());
        return $this->do_rp(count($this->d2_b)-1,$this->maxCost,$this->sumCost);
    }
    protected function do_rp($ln,$cn,$rc){
        $this->rotate1++;
        if(array_key_exists($cn,$this->d2_m[$ln])){return $this->d2_m[$ln][$cn];}
        $this->rotate2++;
        if($cn<=0){return 0;}
        if($cn>=$rc){
            $rtn=0;
            for($i1=0;$i1<=$ln;$i1++){
                $rtn+=$this->d2_b[$i1][1];
            }
            $this->d2_m[$ln][$cn]=$rtn;
            return $rtn;
        }
        if($ln==0){return 0;}
        $this->rotate3++;

        $rc-=$this->d2_b[$ln][0];
        $rtn=$this->do_rp($ln-1,$cn,$rc);
        if($this->d2_b[$ln][0]<=$cn){
            $rtn2=$this->d2_b[$ln][1]+$this->do_rp($ln-1,$cn-$this->d2_b[$ln][0],$rc);
            $rtn=max($rtn,$rtn2);
        }
        $this->d2_m[$ln][$cn]=$rtn;
        return $rtn;
    }
    public function getRoteteCount(){
        echo "<br>\n".$this->rotate1.",".$this->rotate1-$this->rotate2.",".$this->rotate2-$this->rotate3.",".$this->rotate3."<br>\n";
    }
}
$obj=new knapsack1($d2_b,$maxCost);
$an=$obj->getReturn();
echo "knapsack1 $an\n";
$obj->getRoteteCount();
timecheck();

class knapsack2{//コスト辺り価値で昇順に並べて、残りコストで有効最大番号のコスト比でも暫定最大値に届かないなら打ち切り、で探索を早める
    protected $d2_b;//(コスト,価値)の配列
    protected $cn_b;//count($d2_b)
    protected $d2_m;//有効最大リスト番号=>残りコスト=>最大価値のメモ配列
    protected $maxCost;//指定された最大コスト条件
    protected $z_max;//暫定最大値
    protected $some_small;//浮動小数点誤差は怖いので、比較時に下駄を履かせておく分。
    protected $rotate1;
    protected $rotate2;
    protected $rotate3;

    public function __construct($d2_b,$maxCost){
        foreach($d2_b as $d1_fe){
            $d1_fe[2]=$d1_fe[1]/$d1_fe[0];
            $this->insert($d1_fe);
            $this->cn_b++;
        }
        $this->maxCost=$maxCost;
        $this->some_small=0.00001;
    }
    protected function insert($d1_t){
        if($this->cn_b==0){$this->d2_b=array($d1_t);return;}//今回が一つ目の場合
        $tu=$this->cn_b-1;$td=0;
        if($this->d2_b[$this->cn_b-1][2]<=$d1_t[2]){$this->d2_b[]=$d1_t;}//最後尾に追加パターン
        elseif($this->d2_b[0][2]>$d1_t[2]){array_unshift($this->d2_b,0);$this->d2_b[0]=$d1_t;}//先頭に追加パターン
        else{//二分探索で追加位置を探す
            while(true){
                if($tu-$td==1){array_splice($this->d2_b,$tu,0,0);$this->d2_b[$tu]=$d1_t;break;}
                else{
                    $nt=floor(($tu+$td)/2);
                    if($this->d2_b[$nt][2]<=$d1_t[2]){$td=$nt;}
                    else{$tu=$nt;}
                }//下以上で上より小さい、の範囲で狭めていく
            }
        }
    }   

    public function getReturn(){
        $this->d2_m=array_fill(0,count($this->d2_b),array());
        $this->z_max=0;
        $lastCost=$this->maxCost;
        for($i1=count($this->d2_b)-1;$i1>=0;$i1--){
            if($this->d2_b[$i1][0]>$lastCost){break;}
            $this->z_max+=$this->d2_b[$i1][1];
            $lastCost-=$this->d2_b[$i1][0];
        }
        return $this->do_rp(count($this->d2_b)-1,$this->maxCost,0);
    }
    protected function do_rp($ln,$cn,$vn){
        $this->rotate1++;
        if(array_key_exists($cn,$this->d2_m[$ln])){return $this->d2_m[$ln][$cn];}
        $this->rotate2++;
        if($cn<=0){$this->d2_m[$ln][$cn]=0;return 0;}
        if(($this->z_max-$vn)/$cn>$this->d2_b[$ln][2]+$this->some_small){$this->d2_m[$ln][$cn]=0;return 0;}
        if($ln==0){$this->d2_m[$ln][$cn]=0;return 0;}
        $this->rotate3++;

        $rtn=$this->do_rp($ln-1,$cn,$vn);
        if($this->d2_b[$ln][0]<=$cn){
            $rtn2=$this->do_rp($ln-1,$cn-$this->d2_b[$ln][0],$vn+$this->d2_b[$ln][1]);
            $rtn=max($rtn,$rtn2+$this->d2_b[$ln][1]);
        }
        $this->d2_m[$ln][$cn]=$rtn;
        if($this->z_max<$vn+$rtn){$this->z_max=$vn+$rtn;}
        return $rtn;
    }
    public function getRoteteCount(){
        echo "<br>\n".$this->rotate1.",".$this->rotate1-$this->rotate2.",".$this->rotate2-$this->rotate3.",".$this->rotate3."<br>\n";
    }
}
$obj=new knapsack2($d2_b,$maxCost);//シンプル版より遅くなったぞどういうことだ。
$an=$obj->getReturn();
echo "knapsack2 $an\n";
$obj->getRoteteCount();
timecheck();

//実験してみるよー。
//小数計算嫌ったのかと思って掛け算にしてみたらもっと遅くなったなど。
//それぞれちょっといじって再帰回数を表示してみる。
// 25287 time_0.799
// knapsack0 25287
// 5299209,2611459,20172,2667578
// time_0.936
// knapsack1 25287
// 3390764,1667971,10066,1712727
// time_0.696
// knapsack2 25287
// 4029500,1923642,75177,2030681
// time_0.894
//単純に数数えるだけでも、結構遅くなるなあ。ていうか、その分でknapsack2の方が速くなってる。
//再帰回数自体は減ってるんだよな。
//こうしてみると、半分はメモ見て終了なんやな。なら、再帰の先頭でメモ見るより、再帰する前にメモ確認して再帰回数減らした方が、結果速いだろうか。
//コードは長くなるけど、処理内容自体は減るはずだよな。
//→ちょっと速くなったように見えるけど、rotate削ってみると元より遅くなってるんだな。
//内部の最適化の範疇だろうけど、シンプルに書いた方がいい類か。
//
//試しに、条件文だけ増やしてみたら、1割以上遅くなるなど。掛け算割り算が駄目なのか。
//よく考えると、残り要素合計価値との単純比較でいい話だな？掛け算も割り算も要らんわ
//あれ、よく見たら最初に貪欲法で暫定最大値算出するの忘れてるやん。それじゃあ周回数減らないはずだよ。
// 24469 time_0.79
// knapsack0 24469
// 5242777,2584289,19969,2638519
// time_0.934
// knapsack1 24469
// 3301847,1624200,10066,1667581
// time_0.682
// knapsack2 24469
// 188128,77823,15763,94542
// time_0.044
// knapsack3 24469
// 1176429,574354,10053,592022
// time_0.284
//くそ速え……。再帰回数自体が10分の1以下ってのは余りにも強い。
//で、なんでそこに対して更に探索終了条件増やしたはずなのに再帰回数が増えてるんだ3は。
//ああそうか、有効リスト価値合計は、有効リストコスト合計が残りコストを大幅にオーバーしているならデカい数値になってしまうか。そりゃそうか。
//にしても、有効リストコスト合計が残りコスト以下なら全部入れて終了、の処理が増えた分は有ってもいいと思うんだが、完全に影響0だな。
//暫定最大値処理はそこまで強いか……。もうこれが最終盤でいいか。
//あとは、細かい所で、0リターンする時も毎回メモに入れた方がいいかどうか。→入れた方が明確に速い。5%くらい？

class knapsack3{//コスト辺り価値で昇順に並べて、暫定最大値を算出。残りコストが残り要素合計コストを上回るなら全部入れて終了、残り要素合計価値が暫定最大値との差分に満たないなら0リターンで終了。
    protected $d2_b;
    protected $cn_b;
    protected $d2_m;
    protected $maxCost;
    protected $z_max;//暫定最大値
    protected $sumCost;//コスト合計
    protected $sumValue;//価値合計
    protected $rotate1;
    protected $rotate2;
    protected $rotate3;

    public function __construct($d2_b,$maxCost){
        $this->sumCost=0;
        $this->sumValue=0;
        foreach($d2_b as $d1_fe){
            $d1_fe[2]=$d1_fe[1]/$d1_fe[0];
            $this->sumCost+=$d1_fe[0];
            $this->sumValue+=$d1_fe[1];
            $this->insert($d1_fe);
            $this->cn_b++;
            }
        $this->maxCost=$maxCost;
    }
    protected function insert($d1_t){
        if($this->cn_b==0){$this->d2_b=array($d1_t);return;}//今回が一つ目の場合
        $tu=$this->cn_b-1;$td=0;
        if($this->d2_b[$this->cn_b-1][2]<=$d1_t[2]){$this->d2_b[]=$d1_t;}//最後尾に追加パターン
        elseif($this->d2_b[0][2]>$d1_t[2]){array_unshift($this->d2_b,0);$this->d2_b[0]=$d1_t;}//先頭に追加パターン
        else{//二分探索で追加位置を探す
            while(true){
                if($tu-$td==1){array_splice($this->d2_b,$tu,0,0);$this->d2_b[$tu]=$d1_t;break;}
                else{
                    $nt=floor(($tu+$td)/2);
                    if($this->d2_b[$nt][2]<=$d1_t[2]){$td=$nt;}
                    else{$tu=$nt;}
                }//下以上で上より小さい、の範囲で狭めていく
            }
        }
    }   

    public function getReturn(){
        $this->d2_m=array_fill(0,count($this->d2_b),array());
        $this->z_max=0;
        $lastCost=$this->maxCost;
        for($i1=count($this->d2_b)-1;$i1>=0;$i1--){
            if($this->d2_b[$i1][0]>$lastCost){break;}
            $this->z_max+=$this->d2_b[$i1][1];
            $lastCost-=$this->d2_b[$i1][0];
        }
        return $this->do_rp(count($this->d2_b)-1,$this->maxCost,0,$this->sumCost,$this->sumValue);
    }
    protected function do_rp($ln,$cn,$vn,$rc,$rv){//最大有効リスト番号、残りコスト、現在価値、有効リスト合計コスト、有効リスト合計価値
        $this->rotate1++;
        if(array_key_exists($cn,$this->d2_m[$ln])){return $this->d2_m[$ln][$cn];}
        $this->rotate2++;
        if($cn<=0){return 0;}
        if(($this->z_max-$vn)/$cn>$this->d2_b[$ln][2]){$this->d2_m[$ln][$cn]=0;return 0;}
        if(($this->z_max-$vn)>$rv){$this->d2_m[$ln][$cn]=0;return 0;}
        if($cn>=$rc){$this->d2_m[$ln][$cn]=$rv;return $rv;}
        if($ln==0){return 0;}
        $this->rotate3++;

        $rc-=$this->d2_b[$ln][0];
        $rv-=$this->d2_b[$ln][1];
        $rtn=$this->do_rp($ln-1,$cn,$vn,$rc,$rv);
        if($this->d2_b[$ln][0]<=$cn){
            $rtn2=$this->do_rp($ln-1,$cn-$this->d2_b[$ln][0],$vn+$this->d2_b[$ln][1],$rc,$rv);
            $rtn=max($rtn,$rtn2+$this->d2_b[$ln][1]);
        }
        $this->d2_m[$ln][$cn]=$rtn;
        if($this->z_max<$vn+$rtn){$this->z_max=$vn+$rtn;}
        return $rtn;
    }
    public function getRoteteCount(){
        echo "<br>\n".$this->rotate1.",".$this->rotate1-$this->rotate2.",".$this->rotate2-$this->rotate3.",".$this->rotate3."<br>\n";
    }
}
$obj=new knapsack3($d2_b,$maxCost);
$an=$obj->getReturn();
echo "knapsack3 $an\n";
$obj->getRoteteCount();
timecheck();

class knapsack_test extends knapsack2{
    protected function do_rp($ln,$cn,$vn){
        $this->rotate1++;
        if(array_key_exists($cn,$this->d2_m[$ln])){return $this->d2_m[$ln][$cn];}
        $this->rotate2++;
        if($cn<=0){$this->d2_m[$ln][$cn]=0;return 0;}
        if(($this->z_max-$vn)/$cn>$this->d2_b[$ln][2]+$this->some_small){$this->d2_m[$ln][$cn]=0;return 0;}
        if($ln==0){$this->d2_m[$ln][$cn]=0;return 0;}
        $this->rotate3++;

        $rtn=$this->do_rp($ln-1,$cn,$vn);
        if($this->d2_b[$ln][0]<=$cn){
            $rtn2=$this->do_rp($ln-1,$cn-$this->d2_b[$ln][0],$vn+$this->d2_b[$ln][1]);
            $rtn=max($rtn,$rtn2+$this->d2_b[$ln][1]);
        }
        $this->d2_m[$ln][$cn]=$rtn;
        if($this->z_max<$vn+$rtn){$this->z_max=$vn+$rtn;}
        return $rtn;
    }
    public function getRoteteCount(){
        echo "<br>\n".$this->rotate1.",".$this->rotate1-$this->rotate2.",".$this->rotate2-$this->rotate3.",".$this->rotate3."<br>\n";
    }
}

$obj=new knapsack_test($d2_b,$maxCost);
$an=$obj->getReturn();
echo "knapsack_test $an\n";
$obj->getRoteteCount();
timecheck();


?>
