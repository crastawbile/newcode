<?php
namespace crast;
class memo{//複数の組み合わせごとにメモする場合。次数不定のツリー型メモ
    protected $dn_tree;
    //protected $name;//次数不定メモの場合、捜査対象は専用の名前のキーに入れる
    //位置配列引数の末尾を固定するのと同じなので、不要と言えば不要
    public function __construct(protected $rule=0,protected $name=null){
        $this->dn_tree=array();
    }
    protected function compare($tn1,$tn2):int{//rule=2で使用する内容比較メソッド、オーバーライド用
        if($tn2===null){return 1;}
        if($tn1===null){return -1;}
        if(is_array($tn1)){
            $tn1=count($tn1);
            $tn2=count($tn2);
        }
        if($tn1>$tn2){return 1;}
        elseif($tn1<$tn2){return -1;}
        else{return 0;}
    }

    public function read(array $d1_t):mixed{//メモに存在すれば内容を、無ければfalseを返す
        $otar=$this->dn_tree;
        $cn=count($d1_t);
        for($i1=0;$i1<$cn;$i1++){
            if(!array_key_exists($d1_t[$i1],$otar)){return false;}
            $otar=$otar[$d1_t[$i1]];
        }

        if($this->name===null){
            return $otar; 
        }else{
            return $otar[$this->name];
        }
    }
    //メモに書き込む。条件0で新規なら、-1でより小さければ、1でより大きければ
    //-2でcompareで-1なら、2でcompareで1なら
    //変更有りならtrue、変更無しならfalseを返す
    public function write(array $d1_t,$value,?int $rule=null):bool{
        if($rule===null){$rule=$this->rule;}
        $otar=&$this->dn_tree;
        $otck=false;//新規の値か否か
        $cn=count($d1_t);
        for($i1=0;$i1<$cn;$i1++){
            if(!array_key_exists($d1_t[$i1],$otar)){
                $otar[$d1_t[$i1]]=array();
                $otck=true;
            }
            $otar=&$otar[$d1_t[$i1]];
        }
        if($this->name!==null){
            $otar=&$otar[$this->name];//リファレンス代入だと、存在しないキーに代入してもエラー出ないんだね……。
            $otck=true;
        }

        //ruleに基づいて、書き込むかfalseを返す
        if($otck){//完全新規なら無条件で書き込み
            $otar=$value;
        }elseif($rule==0){//rule=0なら、完全新規でない時点でfalse
            return false;
        }elseif($rule==1){
            if($value===null){
                return false;
            }elseif($otar===null){
                $otar=$value;
            }elseif($otar<$value){
                $otar=$value;
            }else{
                return false;
            }
        }elseif($rule==-1){
            if($value===null){
                return false;
            }elseif($otar===null){
                $otar=$value;
            }elseif($otar>$value){
                $otar=$value;
            }else{
                return false;
            }
        }elseif($rule==2){
            if($this->compare($otar,$value)<0){
                $otar=$value;
                }else{
                return false;
            }
        }elseif($rule==-2){
            if($this->compare($otar,$value)>0){
                $otar=$value;
                }else{
                return false;
            }
        }
        unset($otar);//リファレンスは使い終わった時点でunsetしておかないと不安。
        
        return true;
    }
}
