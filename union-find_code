//2023/11/03 グループ数を保持するプロパティcnを追加、それに伴ってcountableになった。
//機能が増えすぎるようならシンプル版と分けるけど、現状それほどでもないと思う。
class ufTree implements countable{
	private $d1_p=array();//接続先一覧
	private $d1_r=array();//ランク一覧
	private $cn;//グループ数
	public function __construct(int|array $something,int $start=0){
		if(is_int($something)){
		    $this->cn=$something;
			for($i1=$start;$i1<$something+$start;$i1++){
				$this->d1_p[$i1]=$i1;
			}
			$this->d1_r=array_fill($start,$something,0);
		}
		elseif(is_array($something)){
		    $this->cn=count($something);
			foreach($something as $fen){
				$this->d1_p[$fen]=$fen;
				$this->d1_r[$fen]=0;
			}
		}
	}
	public function findRoot($tn){
		if($this->d1_p[$tn]==$tn){
			return $tn;
		}
		else{
			$this->d1_p[$tn]=$this->findRoot($this->d1_p[$tn]);
			return $this->d1_p[$tn];
		}
	}
	public function isSame($t1,$t2){
		if($this->d1_p[$t1]==$this->d1_p[$t2]){return true;}
		return $this->findRoot($t1)==$this->findRoot($t2);
	}
	public function unite($t1,$t2){
		$rn1=$this->findRoot($t1);
		$rn2=$this->findRoot($t2);
		if($rn1==$rn2){return;}

		if($this->d1_r[$rn1]<$this->d1_r[$rn2]){
			$this->d1_p[$rn1]=$rn2;
			$this->cn--;
		}
		else{
			$this->d1_p[$rn2]=$rn1;
			$this->cn--;
			if($this->d1_r[$rn1]==$this->d1_r[$rn2]){
				$this->d1_r[$rn1]++;
			}
		}
	}
	//強制的にt2をt1のグループに入れる処理。
    public function obey($t1,$t2){
		$rn1=$this->findRoot($t1);
		$rn2=$this->findRoot($t2);
		if($rn1==$rn2){return;}
		$this->d1_p[$rn2]=$rn1;
		$this->cn--;

		if($this->d1_r[$rn1]<=$this->d1_r[$rn2]){
		    $this->d1_r[$rn1]=$this->d1_r[$rn2]+1;
		}
    }
    public function count():int{
        return $this->cn;
    }
	public function printList(){
		print_r($this->d1_p);
	} 
}  

